# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app_android_version: '%env(APP_ANDROID_VERSION)%'
    app_android_build: '%env(APP_ANDROID_BUILD)%'
    app_mm_key: '%env(APP_MM_KEY)%'
    api_key: '%env(API_KEY)%'
    data_dir: '%kernel.project_dir%/var/data'
    swift_flysystem_container_fotos: 'fotos'
    swift_flysystem_container_thumbs: 'thumbs'
    string $azureAuthorityHost: '%env(AZURE_AUTHORITY_HOST)%'
    string $azureTenantId: '%env(AZURE_TENANT_ID)%'
    string $azureClientId: '%env(AZURE_CLIENT_ID)%'
    $azureFederatedTokenFile: '%env(AZURE_FEDERATED_TOKEN_FILE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $dataDir: '%data_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Migrations/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 1 }

    App\Security\ApiKeyAuthenticator:
        arguments:
            $mmApiKey: '%app_mm_key%'

    App\Process\PerfectViewKoopmanFotoImport:
        bind:
            $container: '@service_container'

    # for unit test
    app.service.factuur:
        class: App\Service\FactuurService
        public: true

    app_util_logger:
        class: App\Utils\Logger

    Qipsius\TCPDFBundle\Controller\TCPDFController: '@qipsius.tcpdf'

    # Open Stack
    openstack:
        class: OpenStack\OpenStack
        lazy: true
        arguments:
            -   authUrl: '%env(SWIFT_AUTH_URL)%'
                region: '%env(SWIFT_REGION)%'
                user:
                    name: '%env(SWIFT_USER_NAME)%'
                    domain:
                        id: '%env(SWIFT_USER_DOMAIN_ID)%'
                    password: '%env(SWIFT_USER_PASSWORD)%'
                scope:
                    project:
                        id: '%env(SWIFT_PROJECT_ID)%'
                requestOptions:
                    timeout: 5

    openstack_client:
        class: OpenStack\OpenStack
        factory: '@openstack'
    openstack_objectstore:
        class: OpenStack\ObjectStore\v1\Service
        lazy: true
        factory: ['@openstack', 'objectStoreV1']
    openstack_objectstore_container_fotos:
        class: OpenStack\ObjectStore\v1\Models\Container
        lazy: true
        factory: ['@openstack_objectstore', 'getContainer']
        arguments:
            - '%swift_flysystem_container_fotos%'
    openstack_objectstore_container_thumbs:
        class: OpenStack\ObjectStore\v1\Models\Container
        lazy: true
        factory: ['@openstack_objectstore', 'getContainer']
        arguments:
            - '%swift_flysystem_container_thumbs%'

    # Flysystem
    flysystem_openstack_adapter_fotos:
        class: Nimbusoft\Flysystem\OpenStack\SwiftAdapter
        lazy: true
        arguments:
            - '@openstack_objectstore_container_fotos'
    flysystem_fotos:
        class: League\Flysystem\Filesystem
        lazy: true
        public: true
        arguments:
            - '@flysystem_openstack_adapter_fotos'
    flysystem_openstack_adapter_thumbs:
        class: Nimbusoft\Flysystem\OpenStack\SwiftAdapter
        lazy: true
        arguments:
            - '@openstack_objectstore_container_thumbs'
    flysystem_thumbs:
        class: League\Flysystem\Filesystem
        lazy: true
        public: true
        arguments:
            - '@flysystem_openstack_adapter_thumbs'

    # Custom formatter for Monolog
    log.custom.formatter:
        class: App\Logging\LogFormatter

    doctrine.dbal.connection_factory:
        class: App\Doctrine\DynamicConnectionFactory