# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app_android_version: '%env(APP_ANDROID_VERSION)%'
    app_android_build: '%env(APP_ANDROID_BUILD)%'
    app_mm_key: '%env(APP_MM_KEY)%'
    api_key: '%env(API_KEY)%'
    mobile_access_key: '%env(MOBILE_ACCESS_KEY)%'
    data_dir: '%kernel.project_dir%/var/data'
    swift_flysystem_container_fotos: 'fotos'
    swift_flysystem_container_thumbs: 'thumbs'
    azureAuthorityHost: '%env(AZURE_AUTHORITY_HOST)%'
    azureTenantId: '%env(AZURE_TENANT_ID)%'
    azureClientId: '%env(AZURE_CLIENT_ID)%'
    azureFederatedTokenFile: '%env(AZURE_FEDERATED_TOKEN_FILE)%'
    fileStorageAccount: '%env(AZURE_STORAGE_IMAGE_ACCOUNT)%'
    fileContainer: '%env(AZURE_STORAGE_IMAGE_CONTAINER)%'
    azureSubscriptionId: '%env(AZURE_SUBSCRIPTION_ID)%'
    azureResourceGroup: '%env(AZURE_RESOURCE_GROUP)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $dataDir: '%data_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Migrations/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 1 }

    App\Security\ApiKeyAuthenticator:
        arguments:
            $mmApiKey: '%app_mm_key%'
            $mobileAccessKey: '%mobile_access_key%'
            $firewallMap: '@security.firewall.map'

    App\Process\PerfectViewKoopmanFotoImport:
        bind:
            $container: '@service_container'

    App\Azure\AzureDatabase:
        arguments:
            $azureBaseConfig: '@app_azure_base_config'

    app_azure_base_config:
        class: App\Azure\Config\AzureBaseConfig
        arguments:
            $subscriptionId: '%azureSubscriptionId%'
            $resourceGroup: '%azureResourceGroup%'
            $clientId: '%azureClientId%'
            $tenantId: '%azureTenantId%'
            $federatedTokenFile: '%azureFederatedTokenFile%'
            $authorityHost: '%azureAuthorityHost%'

    app_azure_sas_file_reader_config:
        class: App\Azure\Config\SASFileReaderConfig
        arguments:
            $baseConfig: '@app_azure_base_config'
            $fileStorageAccount: '%fileStorageAccount%'
            $fileContainer: '%fileContainer%'

    app_azure_sas_file_writer_config:
        class: App\Azure\Config\SASFileWriterConfig
        arguments:
            $baseConfig: '@app_azure_base_config'
            $fileStorageAccount: '%fileStorageAccount%'
            $fileContainer: '%fileContainer%'

    App\Azure\AzureStorage:
        arguments:
            $SASFileReaderConfig: '@app_azure_sas_file_reader_config'
            $SASFileWriterConfig: '@app_azure_sas_file_writer_config'

    # for unit test
    app.service.factuur:
        class: App\Service\FactuurService
        public: true

    app_util_logger:
        class: App\Utils\Logger

    Qipsius\TCPDFBundle\Controller\TCPDFController: '@qipsius.tcpdf'

    imagine.data.loader.azure_image_loader:
        class: App\Azure\AzureImageLoader
        arguments:
            - "@liip_imagine"
        tags:
            - { name: "liip_imagine.binary.loader", loader: azure_image_loader }

    App\EventListener\FallbackFileListener:
        arguments:
            $publicDir: '%kernel.project_dir%/public'
        tags:
        - { name: 'kernel.event_listener', event: 'kernel.response' }

    # # Flysystem
    # flysystem_openstack_adapter_fotos:
    #     class: Nimbusoft\Flysystem\OpenStack\SwiftAdapter
    #     lazy: true
    #     arguments:
    #         - '@openstack_objectstore_container_fotos'
    # flysystem_fotos:
    #     class: League\Flysystem\Filesystem
    #     lazy: true
    #     public: true
    #     arguments:
    #         - '@flysystem_openstack_adapter_fotos'
    # flysystem_openstack_adapter_thumbs:
    #     class: Nimbusoft\Flysystem\OpenStack\SwiftAdapter
    #     lazy: true
    #     arguments:
    #         - '@openstack_objectstore_container_thumbs'
    # flysystem_thumbs:
    #     class: League\Flysystem\Filesystem
    #     lazy: true
    #     public: true
    #     arguments:
    #         - '@flysystem_openstack_adapter_thumbs'

    # Custom formatter for Monolog
    log.custom.formatter:
        class: App\Logging\LogFormatter

    doctrine.dbal.connection_factory:
        class: App\Doctrine\DynamicConnectionFactory